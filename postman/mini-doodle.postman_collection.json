{
  "info": {
    "name": "Mini Doodle API",
    "description": "API collection for Mini Doodle - A meeting scheduler application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Environment Setup",
      "item": [
        {
          "name": "Initialize Environment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Clear any existing environment variables",
                  "pm.environment.clear();",
                  "",
                  "// Set base URL",
                  "pm.environment.set('baseUrl', 'http://localhost:8080');",
                  "",
                  "// Set default headers",
                  "pm.environment.set('contentType', 'application/json');",
                  "",
                  "// Set dynamic timestamp",
                  "pm.environment.set('isoTimestamp', new Date().toISOString());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api-docs"
          }
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('name');",
                  "    ",
                  "    // Store user ID for later use",
                  "    pm.environment.set('userId', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "{{contentType}}"
              }
            ],
            "url": "{{baseUrl}}/api/users",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"name\": \"Test User\"\n}"
            }
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/users/{{userId}}"
          }
        },
        {
          "name": "Get User by Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/users/email/test@example.com"
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email', 'updated@example.com');",
                  "    pm.expect(response).to.have.property('name', 'Updated User');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "{{contentType}}"
              }
            ],
            "url": "{{baseUrl}}/api/users/{{userId}}",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"updated@example.com\",\n    \"name\": \"Updated User\"\n}"
            }
          }
        }
      ]
    },
    {
      "name": "Time Slots",
      "item": [
        {
          "name": "Create Time Slot",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has time slot data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('startTime');",
                  "    pm.expect(response).to.have.property('endTime');",
                  "    pm.expect(response).to.have.property('status', 'AVAILABLE');",
                  "    ",
                  "    // Store time slot ID for later use",
                  "    pm.environment.set('timeSlotId', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "{{contentType}}"
              }
            ],
            "url": "{{baseUrl}}/api/timeslots",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"startTime\": \"{{isoTimestamp}}\",\n    \"endTime\": \"{{isoTimestamp}}\",\n    \"status\": \"AVAILABLE\"\n}"
            }
          }
        },
        {
          "name": "Get Time Slot by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has time slot data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('startTime');",
                  "    pm.expect(response).to.have.property('endTime');",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/timeslots/{{timeSlotId}}"
          }
        },
        {
          "name": "Get Time Slots by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/timeslots/user/{{userId}}"
          }
        },
        {
          "name": "Get Available Time Slots",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains only available slots', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    response.forEach(slot => {",
                  "        pm.expect(slot.status).to.equal('AVAILABLE');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/timeslots/available/{{userId}}"
          }
        },
        {
          "name": "Get Time Slots in Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/timeslots/range/{{userId}}?startTime={{isoTimestamp}}&endTime={{isoTimestamp}}",
              "query": [
                {
                  "key": "startTime",
                  "value": "{{isoTimestamp}}"
                },
                {
                  "key": "endTime",
                  "value": "{{isoTimestamp}}"
                }
              ]
            }
          }
        },
        {
          "name": "Update Time Slot Status",
          "item": [
            {
              "name": "Mark as Busy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Time slot is marked as busy', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('BUSY');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/api/timeslots/{{timeSlotId}}/busy"
              }
            },
            {
              "name": "Mark as Available",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Time slot is marked as available', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('AVAILABLE');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/api/timeslots/{{timeSlotId}}/available"
              }
            },
            {
              "name": "Mark as Booked",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Time slot is marked as booked', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('BOOKED');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "url": "{{baseUrl}}/api/timeslots/{{timeSlotId}}/booked"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Meetings",
      "item": [
        {
          "name": "Create Meeting",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has meeting data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('organizerId');",
                  "    pm.expect(response).to.have.property('timeSlotId');",
                  "    pm.expect(response).to.have.property('participantIds');",
                  "    ",
                  "    // Store meeting ID for later use",
                  "    pm.environment.set('meetingId', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "{{contentType}}"
              }
            ],
            "url": "{{baseUrl}}/api/meetings",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Meeting\",\n    \"description\": \"Test Description\",\n    \"organizerId\": \"{{userId}}\",\n    \"timeSlotId\": \"{{timeSlotId}}\",\n    \"participantIds\": [\"{{userId}}\"]\n}"
            }
          }
        },
        {
          "name": "Get Meeting by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has meeting data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('organizerId');",
                  "    pm.expect(response).to.have.property('timeSlotId');",
                  "    pm.expect(response).to.have.property('participantIds');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/meetings/{{meetingId}}"
          }
        },
        {
          "name": "Get Meetings by Organizer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/meetings/organizer/{{userId}}"
          }
        },
        {
          "name": "Get Meetings by Participant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/api/meetings/participant/{{userId}}"
          }
        },
        {
          "name": "Meeting Participants",
          "item": [
            {
              "name": "Add Participant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Participant is added to meeting', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.participantIds).to.include(pm.environment.get('userId'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "url": "{{baseUrl}}/api/meetings/{{meetingId}}/participants/{{userId}}"
              }
            },
            {
              "name": "Remove Participant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Participant is removed from meeting', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.participantIds).to.not.include(pm.environment.get('userId'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "url": "{{baseUrl}}/api/meetings/{{meetingId}}/participants/{{userId}}"
              }
            },
            {
              "name": "Accept Invitation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has meeting data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('title');",
                      "    pm.expect(response).to.have.property('organizerId');",
                      "    pm.expect(response).to.have.property('timeSlotId');",
                      "    pm.expect(response).to.have.property('participantIds');",
                      "    pm.expect(response.participantIds).to.include(pm.environment.get('userId'));",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{contentType}}"
                  }
                ],
                "url": "{{baseUrl}}/api/meetings/{{meetingId}}/accept/{{userId}}",
                "description": "Accept a meeting invitation for a participant. This endpoint verifies the participant is in the meeting's participant list, updates the participant's time slot status to BOOKED, sends an acceptance notification to the meeting organizer, and returns the updated meeting details."
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
} 